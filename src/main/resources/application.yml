spring:
  cloud:
    stream:
      bindings:
        input-channel-1:
          destination: sales-csv-topic
        sales-input-channel-1:
          destination: sales-csv-topic
        premium-customer-channel:
          destination: premium-cus-sales-topic
        non-premium-customer-channel:
          destination: non-premium-cus-sales-topic
        blocked-customer-channel:
          destination: blocked-cus-sales-topic


      kafka:
        streams:
          binder:
            #applicationId: hellostreams
            brokers:  localhost:9092
            configuration:
              schema.registry.url: http://localhost:8081
              commit.interval.ms: 10000
              state.dir: state-store
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  #serde: io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer
                  #serde: org.springframework.kafka.support.serializer.JsonDeserializer
                  serde:  org.apache.kafka.common.serialization.Serdes$StringSerde
            functions:
              process:
                applicationId: transferProcess
              salesProcess:
                applicationId: salesAggregateProcess
          bindings:
            premium-customer-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
                #valueSerde: org.springframework.kafka.support.serializer.JsonSerializer
            non-premium-customer-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
                #valueSerde: org.springframework.kafka.support.serializer.JsonSerializer
            blocked-customer-channel:
              producer:
                valueSerde: io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
                #valueSerde: org.springframework.kafka.support.serializer.JsonSerializer




